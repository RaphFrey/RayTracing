#include<SDL.h>
#include<vector>
#include <memory>


class GameObject{
  public: 
    GameObject(){};
    virtual void draw(SDL_Renderer *renderer){};
    virtual SDL_Rect bounding_rect(){};
};


class Game {
    std::vector<std::shared_ptr<GameObject>> objects;
public:                                     
    Game();                                 
    ~Game() = default;                      

    void loop();                       
    void update(double delta_time);         
    void draw();
    
    void add_object(std::shared_ptr<GameObject> object){objects.push_back(object);};

    //void rm_object(std::unique_ptr<GameObject> object){objects.remove(object);};

private:                                    
    SDL_Window   *m_game_window;            
    SDL_Event     m_game_window_event;      
    SDL_Renderer *m_game_window_renderer;   
};                                          


class Rectangle: public GameObject{
    SDL_Rect _rectangle;
  public:
    Rectangle(SDL_Rect rect):_rectangle(rect){};
    Rectangle(int x,int y,int w,int h):_rectangle({x,y,w,h}){};
    ~Rectangle() = default;

    void draw(SDL_Renderer *renderer) override;
    SDL_Rect bounding_rect() override;
};
